group javacode;

parameterType ::= [
	"string":"LONG_STRING",
	"int":"LONG_INTEGER",
	"binary":"LONG_BINARY"
]

primitiveType ::= [
	"string":"String",
	"int":"int",
	"any":"Object",
	"binary":"byte[]"
]

castType ::= [
	"string":"String",
	"int":"Integer",
	"any":"Object",
	"binary":"byte[]"
]


protocol(protocol) ::= <<
package twp.generated;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Iterator;
import java.util.List;

import twp.core.Message;
import twp.core.Parameter;
import twp.core.ParameterType;
import twp.core.TWPProtocol;

public class <protocol.bigName>Protocol extends TWPProtocol {
	public static final int ID = <protocol.id>;
	
	private <protocol.bigName>Handler handler;
	
	public <protocol.bigName>Protocol(String host, int port, <protocol.bigName>Handler rh) throws UnknownHostException, IOException {
		super(host, port);
		handler = rh;
		connection.listen();
	}
	
	public <protocol.bigName>Protocol(String host, int port) throws UnknownHostException, IOException {
		super(host, port);
	}
		
	public <protocol.bigName>Protocol(Socket s, <protocol.bigName>Handler rh) throws IOException {
		super(s);
		handler = rh;
	}
	
	public int getVersion() {
		return ID;
	}
	
	<protocol.messages:{message|public void send<message.bigName>(<message.fields:parameterList(); separator=", ">) throws IOException {
	Message message = new Message(<message.id>, ID);
	<message.fields:{field|<if(field.type.anyDefinedBy)>message.addParameter(setAnyDefinedBy(<field.smallName>));<else>message.addParameter(decompose(<field.smallName>);<endif>
}>
	connection.writeMessage(message);
}

public <protocol.bigName><message.bigName> receive<message.bigName>() throws IOException {
	Message message = connection.readMessage();
	if (message == null || message.getType() != <message.id>) {
		// throw exception
	}
	Iterator\<Parameter\> iter = message.getParameters().iterator();
	<protocol.bigName><message.bigName> req = new <protocol.bigName><message.bigName>(this<if(message.fields)>, <endif><message.fields:messageParameterList(); separator=", ">);
	return req;
}
	}>
	
	public void onMessage(Message message) throws IOException {
		Iterator\<Parameter\> iter = message.getParameters().iterator();
		switch (message.getType()) {
		<protocol.messages:{message|case <message.id>:
		<protocol.bigName><message.bigName> req<message.id> = new <protocol.bigName><message.bigName>(this<if(message.fields)>, <endif><message.fields:messageParameterList(); separator=", ">);
		handler.on<protocol.bigName><message.bigName>(req<message.id>);
		break;
}>
		}
	}
}

>>

parameterList() ::= << <type(it.type)> <it.smallName> >>
messageParameterList() ::= << <if(it.type.primitive)><cast(it)> iter.next().getValue()<elseif(it.type.anyDefinedBy)>getAnyDefinedBy(iter.next())<else>new it.type.bigName(iter.next.getValue())<endif> >>
cast(field) ::= <<(<if(field.type.primitive)><castType.(field.type.name)><elseif(field.type.anyDefinedBy)>List\<Object\><else><field.type.bigName><endif>)>>
type(type) ::= << <if(type.primitive)><primitiveType.(type.name)><elseif(type.anyDefinedBy)>List\<Object\><else><type.bigName><endif> >>

handler(protocol) ::= <<
package twp.generated;

import twp.core.TWPHandler;

public interface <protocol.name>Handler extends TWPHandler {
	<protocol.messages:{public void on<protocol.name><it.name>(<protocol.name><it.name> message);
}>
}
>>

message(protocol, message) ::= <<
package twp.generated;
public class <protocol.name><message.name> {
	
	private <protocol.name>Protocol protocol;
	<message.fields:{private <it:parameterList()>;
}>
	public <protocol.bigName><message.bigName>(<protocol.bigName>Protocol p<if(message.fields)>, <endif><message.fields:parameterList(); separator=", ">) {
		this.protocol = p;
		<message.fields:{this.<it.smallName> = <it.smallName>;
}>
	}

	public <protocol.bigName>Protocol getProtocol() {
		return protocol;
	}
	
	<message.fields:{
public <type(it.type)> get<it.bigName>() {
		return <it.smallName>;
	}}>
	
}
 >>
sequence(protocol, seq) ::= <<
package twp.generated;

import java.util.ArrayList;
import java.util.List;

import twp.core.Container;
import twp.core.GenericSequence;
import twp.core.Parameter;
import twp.core.ParameterType;
import twp.core.TWPContainer;

public class <seq.bigName> implements Container {
	
	private List\<<type(seq.type)>\> elements = new ArrayList\<String\>();
	
	public <seq.bigName>() {}
	
	public <seq.bigName>(List<Object> content) {
		for (Object elem:content) {
			elements.add(<if(seq.type.primitive)><cast(field)> elem
			<elseif(field.type.anyDefinedBy)>(List\<Object\>) elem
			<else>new <field.type.bigName>((<genericType(field.type)>) elem<endif>);
		}
	}
	
	public <seq.bigName>(GenericSequence seq) {
		for (Object o:seq.getElements()) {
			elements.add(<if(seq.type.primitive)><cast(field)> elem
			<elseif(field.type.anyDefinedBy)>(List\<Object\>) elem
			<else>new <field.type.bigName>((<genericType(field.type)>) elem<endif>);
		}
	}
	
	public ParameterType getParameterType() {
		return ParameterType.SEQUENCE;
	}
	
	public void add(<type(seq.type)> part) {
		elements.add(part);
	}
	
	public List\<<type(seq.type)>\> getElements() {
		return elements;
	}
	
	public TWPContainer toContainer() {
		TWPContainer container = new TWPContainer(ParameterType.SEQUENCE);
		for (<type(seq.type> elem:elements) {
			<if(seq.type.primitive)>container.add(new Parameter(ParameterType.<parameterType(seq.type.name)>, elem));
			<elseif(seq.type.anyDefinedBy)>container.add(<protocol.bigName>Protocol.setAnyDefinedBy(elem));
			<else>container.add(new Parameter(((Container) elem).getType(), ((Container) elem).toContainer()));<endif>
		}
		return container;
	} 
 }
>>

genericType(type) ::= << <if(type.struct)>GenericStruct<elseif(type.registered)>GenericRegisteredExtension<elseif(type.sequence)>GenerichSequence<elseif(type.union)>GenericUnion<endif> >>
struct(protocol, struct) ::= <<
package twp.generated;

import java.util.List;

import twp.core.Container;
import twp.core.GenericSequence;
import twp.core.GenericStruct;
import twp.core.Parameter;
import twp.core.ParameterType;
import twp.core.TWPContainer;

public class <struct.bigName> implements Container {
	<struct:fields:{private <it:parameterList()>;
}>
	
	public <struct.bigName>(List<Object> params) {
		if (params.size() == <length(struct.fields)>) {
			<struct.fields:{field|<field.smallName> = <if(field.type.primitive)><cast(field)> params.get(<i0>));
			<elseif(field.type.anyDefinedBy)>(List\<Object\>) params.get(<i0>);
			<else>new <field.type.bigName>((<genericType(field.type)>) params.get(<i0>));<endif>
}>
		}
	}
	
	public <struct.bigName>(GenericStruct struct) {
		<struct.fields:{field|<field.smallName> = <if(field.type.primitive)><cast(field)> struct.getElements.get(<i0>));
		<elseif(field.type.anyDefinedBy)>(List\<Object\>) struct.getElements.get(<i0>);
		<else>new <field.type.bigName>((<genericType(field.type)>) struct.getElements.get(<i0>));<endif>
}>	
	}
	
	<struct.fields:{
public <type(it.type)> get<it.bigName>() {
		return <it.smallName>;
	}
	
	public void set<it.bigName>(<type(it.type)> <it.smallName>) {
		this.<it.smallName> = <it.smallName>;
	}
}>
	
	@Override
	public TWPContainer toContainer() {
		TWPContainer container = new TWPContainer(ParameterType.STRUCT);
		<struct.fields:{<if(it.type.anyDefinedBy)>container.add(<protocol.bigName>Protocol.setAnyDefinedBy(<it.smallName>));<else>container.add(<protocol.bigName>Protocol.decompose(<it.smallName>));<endif>
}>
		return container;
	}

	@Override
	public ParameterType getParameterType() {
		return ParameterType.STRUCT;
	}
}

>>
server(protocol) ::= <<
package twp.generated;

import java.io.IOException;
import java.net.Socket;

import twp.core.TWPServer;

public class <protocol.bigName>Server extends TWPServer {

	public <protocol.bigName>Server(int port) throws IOException {
		super(port);
	}

	@Override
	public void openConnection(Socket socket) {
		if (handler != null)
			try {
				new <protocol.bigName>Protocol(socket, (<protocol.bigName>Handler) handler);
			} catch (IOException e) {
				e.printStackTrace();
			}
	}

}
 >>
 
 
 
protocolX(protocol) ::= <<
package twpx.protocol.<protocol.smallName>;

import twpx.core.BaseProtocol;
import twpx.core.Protocol;

public class <protocol.bigName>Protocol extends BaseProtocol implements Protocol {

	public <protocol.bigName>Protocol() {
		id = <protocol.id>;
		<protocol.messages:{addMessage(<it.id>, new <protocol.bigName><it.bigName>());
}>
	}
}
 >>
 
messageX(protocol, message) ::= <<
package twpx.protocol.<protocol.smallName>;

import twpx.core.BaseMessage;
import twpx.core.Message;

public class <protocol.bigName><message.bigName> extends BaseMessage implements Message {

	public <protocol.bigName><message.bigName>() {
		name = "<message.bigName>";
		protocolId = <protocol.id>;
		id = <message.id>;
		<message.fields:{addParameter("<it.name>", "<it.type.name>");
}>
	}

	public <protocol.bigName><message.bigName>(<message.fields:parameterList(); separator=", ">) {
		this();
		<message.fields:{set("<it.name>", <it.smallName>);
}>
	}
<message.fields:{
	public <type(it.type)> get<it.bigName>() {
		return <cast(it)> get("<it.name>");
	}
	
	public void set<it.bigName>(<type(it.type)> <it.smallName>) {
		set("<it.name>", <it.smallName>);
	}
}>
}

 >>